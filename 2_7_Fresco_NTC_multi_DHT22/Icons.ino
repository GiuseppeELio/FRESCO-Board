unsigned long startTime = 0;
unsigned long interval = 0;
const unsigned long displayInterval = 2000;  // Adjust the interval as needed
int displayState = 0;                        // Initial state

const unsigned char plug[] PROGMEM = {
  // 'Pictogrammers-Material-Power-plug, 16x16px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x3f, 0xe0, 0x3f, 0xfc, 0x07, 0xfc,
  0x07, 0xfc, 0x3f, 0xfc, 0x3f, 0xe0, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'Icons8-Windows-8-Industry-Processor', 16x16px
const unsigned char cpu_icon[] PROGMEM = {
  0x0a, 0x50, 0x00, 0x00, 0x3f, 0xfc, 0x2f, 0xfc, 0xbf, 0xfd, 0x3f, 0xfc, 0xbf, 0xfd, 0x3f, 0xfc,
  0x3f, 0xfc, 0xbf, 0xfd, 0x3f, 0xfc, 0xbf, 0xfd, 0x3f, 0xf4, 0x3f, 0xfc, 0x00, 0x00, 0x0a, 0x50
};

// 'Pictogrammers-Material-Sd', 16x16px
const unsigned char sd_icon[] PROGMEM = {
  0x00, 0x00, 0x01, 0xf8, 0x07, 0xf8, 0x0e, 0xa8, 0x1e, 0xa8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8,
  0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x00, 0x00
};

// 'Custom-Icon-Design-Mono-General-3-Wifi', 16x16px
const unsigned char Wifi_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x1f, 0xf8, 0x70, 0x0e, 0xe0, 0x07, 0x07, 0xe0, 0x1e, 0x78,
  0x18, 0x18, 0x03, 0xc0, 0x07, 0xe0, 0x00, 0x00, 0x01, 0x80, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00
};

const unsigned char acs_point[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char empty_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char Temperature_2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x07, 0x80, 0x1f, 0x00,
  0x0c, 0x80, 0x3f, 0x80, 0x08, 0x80, 0x7f, 0x80, 0x0c, 0x80, 0x7f, 0xc0, 0x0f, 0x80, 0xff, 0xe0,
  0x0f, 0x81, 0xff, 0xe0, 0x0f, 0x81, 0xff, 0xf0, 0x0f, 0x83, 0xff, 0xf0, 0x0f, 0x83, 0xff, 0xf8,
  0x0f, 0x83, 0xff, 0xf8, 0x0f, 0x87, 0xff, 0xf8, 0x0f, 0xc7, 0xff, 0xf8, 0x1f, 0xc7, 0xff, 0xf8,
  0x1f, 0xe3, 0xff, 0xf8, 0x1f, 0xe3, 0xff, 0xf8, 0x1f, 0xc3, 0xff, 0xf0, 0x1f, 0xc1, 0xff, 0xf0,
  0x0f, 0x80, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char Therm_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00,
  0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0xff, 0xc0, 0x00, 0xcc, 0xff, 0xc0,
  0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0xff, 0x00, 0x00, 0xcc, 0xff, 0x00,
  0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0xff, 0xc0, 0x00, 0xcc, 0xff, 0xc0,
  0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0xff, 0x00, 0x00, 0xcc, 0xff, 0x00,
  0x00, 0xcc, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x01, 0x86, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,
  0x03, 0x33, 0x00, 0x00, 0x03, 0x33, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x01, 0x86, 0x00, 0x00,
  0x01, 0xfe, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char Sun_icon[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xe0, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x0c, 0x0e, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00,
  0x10, 0x01, 0x00, 0x00, 0x30, 0x03, 0x80, 0x00, 0x30, 0x1f, 0xe0, 0x00, 0x10, 0x3f, 0xf0, 0x00,
  0x10, 0x7f, 0xff, 0x00, 0x30, 0xff, 0xff, 0xc0, 0x10, 0xff, 0xff, 0xe0, 0x09, 0xff, 0xff, 0xf0,
  0x0d, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xfc,
  0x1f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc,
  0x3f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xe0,
  0x07, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char Date_icon[] PROGMEM = {
  0x00, 0xe0, 0x06, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x01, 0xf0, 0x0f, 0x00,
  0x00, 0xf0, 0x0f, 0x00, 0x00, 0xf0, 0x0f, 0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc,
  0x7f, 0xff, 0xff, 0xfc, 0x7f, 0x9f, 0xff, 0xfc, 0x7e, 0x6f, 0xff, 0xfc, 0x7f, 0xf7, 0xff, 0xfc,
  0x7b, 0xf7, 0xff, 0xfc, 0x7b, 0xf7, 0xff, 0xfc, 0x79, 0xf7, 0xff, 0xfc, 0x7c, 0xe7, 0xff, 0xfc,
  0x7e, 0x1f, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xfc,
  0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Drawing the screen

void draw(void) {
  // graphic commands to redraw the complete screen should be placed here
  u8g.drawBitmapP(0, 0, 2, 16, plug);
  if (clock_status != "Fail")
    u8g.drawBitmapP(20, 0, 2, 16, cpu_icon);
  else if (clock_status == "Fail")
    u8g.drawBitmapP(20, 0, 2, 16, empty_icon);
  if (sd_status == "Done")
    u8g.drawBitmapP(40, 0, 2, 16, sd_icon);
  else if (sd_status == "Fail")
    u8g.drawBitmapP(50, 0, 2, 16, empty_icon);
  if (wifi_status == "Done")
    u8g.drawBitmapP(60, 0, 2, 16, Wifi_icon);
  else if (wifi_status == "Fail")
    u8g.drawBitmapP(50, 0, 2, 16, acs_point);
  u8g.setFont(u8g_font_8x13);
  u8g.setPrintPos(78, 13);
  u8g.print("FRESCO");
}

void drawAIP() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Acc Pnt IP");
    u8g.setPrintPos(10, 50);
    u8g.print(apIP);
  } while (u8g.nextPage());
}

void drawLIP() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Wi-Fi loc IP");
    u8g.setPrintPos(10, 50);
    u8g.print(localIP);
  } while (u8g.nextPage());
}

void Draw_dateandtime() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Date & Time");
    u8g.setPrintPos(0, 45);
    u8g.print(Date);
    u8g.setPrintPos(0, 60);
    u8g.print(Time);
    u8g.drawBitmapP(90, 25, 4, 32, Date_icon);
  } while (u8g.nextPage());
}

void Draw_th1() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Tamb & Hum 1");
    u8g.setPrintPos(5, 40);
    u8g.print(t);
    u8g.setPrintPos(45, 40);
    u8g.print("C");
    u8g.setPrintPos(10, 60);
    u8g.print(h);
    u8g.setPrintPos(55, 60);
    u8g.print("%");
    u8g.drawBitmapP(90, 25, 4, 32, Temperature_2);
  } while (u8g.nextPage());
}

void Draw_th2() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Tamb & Hum 2");
    u8g.setPrintPos(5, 40);
    u8g.print(t2);
    u8g.setPrintPos(45, 40);
    u8g.print("C");
    u8g.setPrintPos(10, 60);
    u8g.print(h2);
    u8g.setPrintPos(55, 60);
    u8g.print("%");
    u8g.drawBitmapP(90, 25, 4, 32, Temperature_2);
  } while (u8g.nextPage());
}

void Draw_th3() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Tamb & Hum 3");
    u8g.setPrintPos(5, 40);
    u8g.print(t3);
    u8g.setPrintPos(45, 40);
    u8g.print("C");
    u8g.setPrintPos(10, 60);
    u8g.print(h3);
    u8g.setPrintPos(55, 60);
    u8g.print("%");
    u8g.drawBitmapP(90, 25, 4, 32, Temperature_2);
  } while (u8g.nextPage());
}

void Draw_t1t2() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Tsample 1 and 2");
    u8g.setPrintPos(5, 40);
    u8g.print(T[0], 2);
    u8g.setPrintPos(65, 40);
    u8g.print("C");
    u8g.setPrintPos(10, 60);
    u8g.print(T[1], 2);
    u8g.setPrintPos(75, 60);
    u8g.print("C");
    u8g.drawBitmapP(90, 35, 4, 32, Therm_icon);
  } while (u8g.nextPage());
}

void Draw_t3t4() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Tsample 3 and 4");
    u8g.setPrintPos(5, 40);
    u8g.print(T[2], 2);
    u8g.setPrintPos(65, 40);
    u8g.print("C");
    u8g.setPrintPos(10, 60);
    u8g.print(T[3], 2);
    u8g.setPrintPos(75, 60);
    u8g.print("C");
    u8g.drawBitmapP(90, 35, 4, 32, Therm_icon);
  } while (u8g.nextPage());
}

void Draw_tBxtBr() {
  u8g.firstPage();
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("TBox and Board");
    u8g.setPrintPos(5, 40);
    u8g.print(T[4], 2);
    u8g.setPrintPos(65, 40);
    u8g.print("C");
    u8g.setPrintPos(10, 60);
    u8g.print(tempBoard, 2);
    u8g.setPrintPos(75, 60);
    u8g.print("C");
    u8g.drawBitmapP(90, 35, 4, 32, Therm_icon);
  } while (u8g.nextPage());
}

void Draw_TSirr() {
  u8g.firstPage();  // first page
  do {
    draw();
    u8g.setFont(u8g_font_8x13);
    u8g.setPrintPos(3, 30);
    u8g.print("Irr and SkyT");
    u8g.setPrintPos(5, 40);
    u8g.print(irr, 1);
    u8g.setPrintPos(65, 40);
    u8g.print("W/m2");
    u8g.setPrintPos(10, 60);
    u8g.print(IR_temp_sky, 2);
    u8g.setPrintPos(75, 60);
    u8g.print("C");
    u8g.drawBitmapP(90, 35, 4, 32, Sun_icon);
  } while (u8g.nextPage());
}

void init_screen() {
  u8g.firstPage();  // first page
  do {
    draw();
  } while (u8g.nextPage());
  startTime = millis();  // Record the start time
  while (millis() - startTime < 2000) {
    drawAIP();
  }
  startTime = millis();  // Reset the start time
  while (millis() - startTime < 2000) {
    drawLIP();
  }
  u8g.firstPage();  // first page
  do {
  } while (u8g.nextPage());
}

void displaying_data(void) {
  switch (displayState) {
    case 0:
      // Display general information
      u8g.firstPage();
      do {
        draw();
      } while (u8g.nextPage());
      break;
    case 1:
      // Display date and time
      Draw_dateandtime();
      break;
    case 2:
      // Display temperature and humidity 1
      Draw_th1();
      break;
    case 3:
      // Display temperature and humidity 2
      Draw_th2();
      break;
    case 4:
      // Display temperature and humidity 2
      Draw_th3();
      break;
    case 5:
      // Display temperature and humidity 2
      Draw_t1t2();
      break;
    case 6:
      // Display temperature and humidity 2
      Draw_t3t4();
      break;
    case 7:
      // Display temperature and humidity 2
      Draw_tBxtBr();
      break;
    case 8:
      // Display temperature and humidity 2
      Draw_TSirr();
      break;
    default:
      // Handle unknown state
      break;
  }

  // Check if it's time to switch to the next state
  if (millis() - startTime >= displayInterval) {
    startTime = millis();  // Reset the start time
    displayState++;

    // Reset state to the initial state if we've reached the end
    if (displayState >= 9) {
      displayState = 0;
    }
  }
  //Serial.print("State: ");
  //Serial.println(displayState);
}
